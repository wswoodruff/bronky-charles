(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';
/**
 *
 * fart.js
 * A javascript library for adding fart sounds to your web experience
 *
 *
 * @author 	Tel Smith
 * @tweet 	@74656c
 * @web 	http://jsfart.com/
 * @github 	https://github.com/74656c/fart.js/
 *
 * version 2.0.0
 *
 * Remove need for jQuery for actual plugin
 *
 *
 */

/**
 * Here are the main fart sounds.
 * fart name : fart file (minus extension)
 */

var farts = {
  toot: 'fart1',
  ripper: 'fart2',
  plop: 'fart3',
  squit: 'fart4',
  raspberry: 'fart5',
  squat: 'fart6',
  tuppence: 'fart7',
  liftoff: 'fart8',
  trumpet: 'fart9',
  fizzler: 'fart10',
  windy: 'fart11',
  eine: 'fart12',
  fartception: 'fart13',
  fartpoint1: 'fart14'
};
/**
* This is the Fart constructor.
*
* @class Fart
* @constructor
*
* @param {Object} options Default Sound, Loop and Volume
*/

function Fart(options) {
  this.sound = this.default_sound;
  this.fart_player = null;
  this.old_player = false;
  this.options = this.fartxtend({
    default_sound: farts.raspberry,
    loop: false,
    volume: 50 // 0 - 100

  }, options);
  this.init();
}

Fart.preloaded = false;
/**
 *
 * Mimic jQuery Extend. 			✓
 * Change name for Fart-based LOL. 	✓
 *
 */

Fart.prototype.fartxtend = function (options, defaults) {
  for (var key in defaults) {
    if (defaults.hasOwnProperty(key)) {
      options[key] = defaults[key];
    }
  }

  return options;
};
/**
* Init the player. Figure out if the old player should be loaded by checking if the audio element has the canPlayType() method
*
* @method init
*/


Fart.prototype.init = function () {
  this.fart_player = document.createElement("audio");

  if (typeof this.fart_player.canPlayType == 'undefined') {
    this.load_old_player();
  }

  this.preload();
};
/**
* If the browser is too old to load an AUDIO element, its probably ie7/8
*
* @method load_old_player
*/


Fart.prototype.load_old_player = function () {
  document.body.innerHTML += '<div style="display:none;"><object id="contentPlayer" classid="CLSID:6BF52A52-394A-11d3-B153-00C04F79FAA6" width="100" height="100"><param name="volume" value="100%" /><param name="windowlessVideo" value="true"><param name="AnimationatStart" value="0" /><param name="autostart" value="1" /></object></div>';
  this.fart_player = document.getElementById('contentPlayer');
  this.fart_old_player = true;
};
/**
* Play the sound via the browser.
* If a valid $sound is passed, it will play, otherwise it will default to the defaut sound
*
* @method play
* @param {String} foo The name of the sound to play
* @param {String} foo A callback for once the sound has ended
*/


Fart.prototype.play = function (sound, callback) {
  var fart = sound ? farts[sound] ? farts[sound] : sound : this.options.default_sound;
  callback = callback || null;

  if (!this.fart_old_player) {
    var ext = this.fart_player.canPlayType('audio/mp3') ? '.mp3' : '.wav';
    this.fart_player.setAttribute('src', "/public/farts/" + fart + ext);
    this.fart_player.loop = this.options.loop;
    this.fart_player.volume = this.options.volume / 100;
    this.fart_player.play();
    $(this.fart_player).on("ended", function () {
      if (callback) {
        callback();
        $(this.fart_player).off("ended");
      }
    });
  } else {
    this.fart_player.URL = "/farts/" + fart + '.mp3';
  }
};
/**
* Stop the sound from playing
*
* @method stop
*/


Fart.prototype.stop = function () {
  this.fart_player.pause();
};
/**
* Remove the element from the DOM
*
* @method remove
*/


Fart.prototype.remove = function () {
  this.fart_player.remove();
};
/**
* Play a random fart from the list
*
* @method random
*/


Fart.prototype.random = function () {
  var keys = Object.keys(farts);
  var fart = keys[keys.length * Math.random() << 0];
  this.play(fart);
};
/**
* Try and preload the sounds. This was useful when the sound files where on a remote server
*
* @method preload
*/


Fart.prototype.preload = function () {
  var fart_player = this.fart_player;

  if (!this.fart_old_player && !Fart.preloaded) {
    Object.values(farts).forEach(function (val) {
      var ext = fart_player.canPlayType('audio/mp3') ? '.mp3' : '.wav';
      fart_player.setAttribute('src', "/farts/" + val + ext); // console.log('preload:',val);
    });
    Fart.preloaded = true;
  }
};

module.exports = {
  Fart: Fart,
  farts: farts
};

},{}],2:[function(require,module,exports){
'use strict';

console.log('Hello bronky!'); // Special thanks

console.log('Special thanks to fart.js for the farts! — http://jsfart.com');
console.log('Special thanks to CSShake for the shakes! — https://elrumordelaluz.github.io/csshake'); // 4 the devs

var PLAY_FART_SOUNDS = true;
var RUN_SHAKES = true; // OPENING SCREEN SHOULD BE BIG WHITE TEXT
// GIMME A HIGH FIVE!!
// WITH BOTH HANDS HIGH FIVE HANDS
// THEN HE TURNS INTO DANCING BRONKY WITH YOUR IP ADDRESS

var utils = {};

utils.randomFromArray = function (arr) {
  return arr[Math.floor(Math.random() * arr.length)];
};

utils.randomFromArrayExcept = function (arr) {
  for (var _len = arguments.length, except = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    except[_key - 1] = arguments[_key];
  }

  var filtered = arr.filter(function (x) {
    return x !== except;
  });
  return filtered[Math.floor(Math.random() * filtered.length)];
}; // Init


var chosenFarts = [// 'toot', // There's no toot without tuppence
// 'tuppence', // There's no tuppence without toot
'ripper', 'raspberry', 'trumpet', 'windy' // Ahhh, Chicago
];
var chosenShakes = ['shake-hard', 'shake-crazy']; // Init the farts from fart.js

var _require = require('./fart'),
    Fart = _require.Fart,
    farts = _require.farts;

var fart = new Fart({
  volume: 100
});
window.Fart = Fart;
window.bronkyFart = fart;
window.farts = farts;

var playFart = function playFart(chosenFart) {
  if (!PLAY_FART_SOUNDS) {
    return;
  }

  fart.play(chosenFart);
};

var bronky = document.getElementById('bronkyContent'); // Init Bronky's shakes from CSShakes

var initShakeClasses = ['shake-constant', 'shake-slow' // 'shake-constant--hover'
// 'shake-freeze'
// 'shake-opacity'
];

if (RUN_SHAKES) {
  var _bronky$classList;

  (_bronky$classList = bronky.classList).add.apply(_bronky$classList, initShakeClasses);
}

var isFarting = false;

var shakeBronky = function shakeBronky(shake, duration) {
  var _bronky$classList2;

  if (!RUN_SHAKES) {
    return;
  }

  isFarting = true;

  (_bronky$classList2 = bronky.classList).remove.apply(_bronky$classList2, chosenShakes);

  bronky.classList.add(shake);
  setTimeout(function () {
    bronky.classList.remove(shake);
    isFarting = false;
  }, duration || Math.random() * 3000 + 2000);
};

var mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
var isMobile = false;

if (mobileRegex.test(navigator.userAgent)) {
  isMobile = true;
}

var lastFart = null;
var lastShake = null;

var bronkyFart = function bronkyFart() {
  var shakeFartSettings = {
    toot: {
      shakeNameChoices: ['shake-little', 'shake-rotate'],
      duration: 1000
    },
    tuppence: {
      shakeNameChoices: ['shake-little', 'shake-rotate'],
      duration: 1000
    },
    ripper: {
      shakeNameChoices: ['shake-hard', 'shake-vertical'],
      duration: 1500
    },
    raspberry: {
      shakeNameChoices: ['shake-crazy', 'shake-rotate'],
      duration: 2000
    },
    trumpet: {
      shakeNameChoices: ['shake-hard', 'shake-crazy', 'shake-rotate'],
      duration: 1400
    },
    windy: {
      shakeNameChoices: ['shake-hard', 'shake-rotate'],
      duration: 5800
    }
  };
  var randomFart = utils.randomFromArrayExcept(chosenFarts, lastFart) || 'raspberry';
  lastFart = randomFart;
  var _shakeFartSettings$ra = shakeFartSettings[randomFart],
      shakeNameChoices = _shakeFartSettings$ra.shakeNameChoices,
      duration = _shakeFartSettings$ra.duration;
  playFart(randomFart);
  var AUDIO_LOAD_TIMEOUT = isMobile ? 200 : 400;
  setTimeout(function () {
    var randomShake = utils.randomFromArrayExcept([].concat(shakeNameChoices), lastShake) || 'shake-rotate';
    lastShake = randomShake;
    shakeBronky(randomShake, duration);
  }, AUDIO_LOAD_TIMEOUT);
};

var okStopTheFarts = document.getElementById('okStopTheFartsBtn');

if (isMobile) {
  console.log('isMobile', isMobile);
  okStopTheFarts.style.padding = '200px';
} // Position the ip address div


var isLocal = window.location.host.startsWith('localhost:');
var isBronky = window.location.host === 'bronkycharles.com';
var isBronkonious = window.location.host === 'bronkoniouscharleston.com';
var urIp = document.getElementById('urip');
urIp.style.top = '175px';

if (isLocal || isBronky) {
  urIp.style.left = '150px';
  urIp.style.transform = 'rotate(-45deg)';
} else if (isBronkonious) {
  urIp.style.right = '150px';
  urIp.style.transform = 'rotate(45deg)';
} // Init the webpage playing a fart in case that works.
// Normally the user has to interact with the document before
// a sound can be played.
// At least we'll shake bronky loL


bronkyFart();
setInterval(function () {
  if (!isFarting) {
    bronkyFart();
  }
}, 10000);
document.onclick = bronkyFart; // Live chat
//

},{"./fart":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
